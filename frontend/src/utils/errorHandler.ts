import { ENV } from './environment';

/**
 * Interface cho c·∫•u tr√∫c th√¥ng tin l·ªói
 */
interface ErrorDetails {
  message: string;
  stack?: string;
  componentStack?: string;
  context?: Record<string, any>;
  timestamp: string;
}

/**
 * Chu·∫©n h√≥a ƒë·ªëi t∆∞·ª£ng l·ªói ƒë·ªÉ ƒë·∫£m b·∫£o c·∫•u tr√∫c nh·∫•t qu√°n
 */
export const normalizeError = (error: unknown, context: Record<string, any> = {}): ErrorDetails => {
  let errorDetails: ErrorDetails = {
    message: 'L·ªói kh√¥ng x√°c ƒë·ªãnh',
    context,
    timestamp: new Date().toISOString()
  };

  if (error instanceof Error) {
    errorDetails = {
      ...errorDetails,
      message: error.message,
      stack: error.stack,
    };
  } else if (typeof error === 'string') {
    errorDetails.message = error;
  } else if (error && typeof error === 'object') {
    errorDetails = {
      ...errorDetails,
      ...error as Record<string, any>,
      message: (error as any).message || errorDetails.message
    };
  }

  return errorDetails;
};

/**
 * Ghi log l·ªói chi ti·∫øt
 */
export const logError = (error: unknown, context: Record<string, any> = {}): void => {
  const errorDetails = normalizeError(error, context);
  
  // Log chi ti·∫øt trong development, log c∆° b·∫£n trong production
  if (ENV.IS_DEVELOPMENT) {
    console.error('üî¥ L·ªói ·ª©ng d·ª•ng:', errorDetails.message);
    console.error('Th√¥ng tin chi ti·∫øt:', errorDetails);
    if (errorDetails.stack) {
      console.error('Stack trace:', errorDetails.stack);
    }
  } else {
    // Trong production, ch·ªâ log th√¥ng tin c∆° b·∫£n
    console.error('L·ªói ·ª©ng d·ª•ng:', errorDetails.message);
  }
  
  // ·ªû ƒë√¢y c√≥ th·ªÉ th√™m m√£ ƒë·ªÉ g·ª≠i l·ªói ƒë·∫øn d·ªãch v·ª• theo d√µi l·ªói nh∆∞ Sentry
  // if (ENV.IS_PRODUCTION) {
  //   sendErrorToMonitoringService(errorDetails);
  // }
};

/**
 * Tr√¨nh bao b·ªçc (wrapper) ƒë·ªÉ b·∫Øt l·ªói trong c√°c h√†m async
 */
export const withErrorHandling = <T extends (...args: any[]) => Promise<any>>(
  fn: T,
  errorHandler?: (error: unknown) => void
): ((...args: Parameters<T>) => Promise<ReturnType<T>>) => {
  return async (...args: Parameters<T>): Promise<ReturnType<T>> => {
    try {
      return await fn(...args);
    } catch (error) {
      // Ghi log l·ªói
      logError(error, { functionName: fn.name, arguments: args });
      
      // G·ªçi error handler t√πy ch·ªânh n·∫øu c√≥
      if (errorHandler) {
        errorHandler(error);
      }
      
      throw error;
    }
  };
};

/**
 * X·ª≠ l√Ω l·ªói khi hi·ªÉn th·ªã cho ng∆∞·ªùi d√πng
 * Tr·∫£ v·ªÅ th√¥ng b√°o l·ªói th√¢n thi·ªán thay v√¨ th√¥ng tin k·ªπ thu·∫≠t
 */
export const getUserFriendlyErrorMessage = (error: unknown): string => {
  // X√°c ƒë·ªãnh lo·∫°i l·ªói v√† tr·∫£ v·ªÅ th√¥ng b√°o ph√π h·ª£p
  if (error instanceof Error) {
    // X·ª≠ l√Ω c√°c lo·∫°i l·ªói c·ª• th·ªÉ
    if (error.message.includes('network') || error.message.includes('fetch')) {
      return 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng v√† th·ª≠ l·∫°i.';
    }
    
    if (error.message.includes('timeout')) {
      return 'Y√™u c·∫ßu ƒë√£ h·∫øt th·ªùi gian ch·ªù. Vui l√≤ng th·ª≠ l·∫°i sau.';
    }
    
    if (error.message.includes('permission') || error.message.includes('403')) {
      return 'B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y.';
    }
    
    if (error.message.includes('not found') || error.message.includes('404')) {
      return 'Kh√¥ng t√¨m th·∫•y t√†i nguy√™n y√™u c·∫ßu.';
    }

    if (error.message.includes('auth') || error.message.includes('login') || error.message.includes('401')) {
      return 'Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.';
    }
    
    // Tr∆∞·ªùng h·ª£p l·ªói Supabase
    if (error.message.includes('supabase')) {
      return 'L·ªói k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i sau.';
    }
  }
  
  // Th√¥ng b√°o l·ªói m·∫∑c ƒë·ªãnh
  return 'ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën. Vui l√≤ng th·ª≠ l·∫°i sau.';
}; 